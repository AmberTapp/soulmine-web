// ========================
// üåê –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –ò –°–û–°–¢–û–Ø–ù–ò–ï
// ========================

const appState = {
  userAddress: null,
  isCalling: false,
  callStartTime: null,
  callTimer: null,
  miningInterval: null,
  localStream: null,
  peerConnection: null,
  dataChannel: null,
  ws: null,
  callPartnerAddress: null,
  isSearching: false,
  currentFilter: 'none',
  sharedMoment: false,

  // –ü—Ä–æ–≥—Ä–µ—Å—Å SoulAI
  soulAI: {
    emotions: { happy: 0, neutral: 0, surprised: 0, focused: 0 },
    compatibility: 50,
    adviceCooldown: false
  },

  // –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userBehavior: {
    messagesSent: 0,
    responseTime: [],
    initiatedChats: 0,
    usedVoice: false,
    usedVideo: false
  },

  // –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—ã
  coupleProgress: {
    messages: 0,
    days_active: 0,
    compatibility: 50
  },

  // –ò—Å—Ç–æ—Ä–∏—è –∑–≤–æ–Ω–∫–æ–≤
  callHistory: [],

  // TonConnect
  connector: null,

  // –ö—ç—à
  cache: {
    loveBalance: null,
    nfts: [],
    coupleNFTs: []
  },

  // –ö–≤–µ—Å—Ç—ã (–ª–æ–≥–∏–∫–∞, –Ω–µ UI)
  quests: [
    { id: "connect_wallet", title: "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫", description: "–°—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é –¥–≤–∏–∂–µ–Ω–∏—è #LoveOnTON", goal: 1, progress: 0, reward: { love: 50, nft: "–ê–ø–æ—Å—Ç–æ–ª –õ—é–±–≤–∏" }, completed: false },
    { id: "first_call", title: "–°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∑–≤–æ–Ω–æ–∫", description: "–ü–æ–ª—É—á–∏—Ç–µ 100 $LOVE –∏ NFT –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞", goal: 1, progress: 0, reward: { love: 100, nft: "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω SoulMine" }, completed: false },
    { id: "swipe_like", title: "–°–≤–∞–π–ø–Ω–∏—Ç–µ –≤–ø—Ä–∞–≤–æ", description: "–ù–∞–π–¥–∏—Ç–µ —Å–≤–æ—é AI-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", goal: 5, progress: 0, reward: { love: 10, nft: null }, completed: false },
    { id: "complete_call", title: "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∑–≤–æ–Ω–æ–∫", description: "–ö–∞–∂–¥–∞—è –º–∏–Ω—É—Ç–∞ = $LOVE", goal: 10, progress: 0, reward: { love: 50, nft: "–ú–∞—Å—Ç–µ—Ä –ó–≤–æ–Ω–∫–æ–≤" }, completed: false },
    { id: "vote_in_dao", title: "–ü—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ –≤ DAO", description: "–í–∞—à –≥–æ–ª–æ—Å = –≤–∞—à–µ –≤–ª–∏—è–Ω–∏–µ", goal: 3, progress: 0, reward: { love: 30, nft: "–î–µ–º–æ–∫—Ä–∞—Ç –õ—é–±–≤–∏" }, completed: false },
    { id: "share_achievement", title: "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º", description: "–°—Ç–∞–Ω—å—Ç–µ –∞–ø–æ—Å—Ç–æ–ª–æ–º –¥–≤–∏–∂–µ–Ω–∏—è", goal: 1, progress: 0, reward: { love: 25, nft: "–ü—Ä–æ–ø–æ–≤–µ–¥–Ω–∏–∫ –õ—é–±–≤–∏" }, completed: false }
  ],

  // –ö–æ–Ω—Ç–∞–∫—Ç—ã
  contacts: {
    telegram: [],
    ton: []
  },

  // DAO
  dao: {
    proposals: [],
    userVotes: {},
    userNFT: null
  }
};

const CONFIG = {
  JETTON_MASTER_ADDRESS: 'EQAf1n9pHB4gITeBj4VA6jYKa4QKAs7e1z5SSQY3DnYme-Yj',
  DAO_CONTRACT_ADDRESS: 'EQB...', // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å DAO
  SIGNALING_SERVER_URL: 'wss://soulmine-signaling.fly.dev',
  TON_MANIFEST_URL: 'https://soulmine-web.vercel.app/tonconnect-manifest.json', // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ë–†–ê–ù–´ –ü–†–û–ë–ï–õ–´
  STORAGE_KEYS: {
    USER_ADDRESS: 'soulmine_user_address',
    SOUL_AI: 'soulmine_soul_ai',
    USER_BEHAVIOR: 'soulmine_user_behavior',
    QUESTS: 'soulmine_quests',
    CALL_HISTORY: 'soulmine_call_history_',
    ACHIEVEMENTS: 'soulmine_achievements',
    DAO: 'soulmine_dao',
    CONTACTS: 'soulmine_contacts'
  }
};

// ========================
// üíæ –•–ï–õ–ü–ï–†–´ –î–õ–Ø localStorage + –¢–û–ù
// ========================

function saveToStorage(key, data) {
  try {
    localStorage.setItem(key, JSON.stringify(data));
  } catch (e) {
    console.warn('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage', key, e);
  }
}

function loadFromStorage(key, fallback = null) {
  try {
    const data = localStorage.getItem(key);
    return data ? JSON.parse(data) : fallback;
  } catch (e) {
    console.warn('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ localStorage', key, e);
    return fallback;
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
appState.userAddress = loadFromStorage(CONFIG.STORAGE_KEYS.USER_ADDRESS);
appState.soulAI = loadFromStorage(CONFIG.STORAGE_KEYS.SOUL_AI, appState.soulAI);
appState.userBehavior = loadFromStorage(CONFIG.STORAGE_KEYS.USER_BEHAVIOR, appState.userBehavior);
appState.quests = loadFromStorage(CONFIG.STORAGE_KEYS.QUESTS, appState.quests);
appState.callHistory = loadFromStorage(`${CONFIG.STORAGE_KEYS.CALL_HISTORY}${appState.userAddress}`, []);
appState.dao = loadFromStorage(CONFIG.STORAGE_KEYS.DAO, appState.dao);
appState.contacts = loadFromStorage(CONFIG.STORAGE_KEYS.CONTACTS, appState.contacts);

// ========================
// üí¨ –õ–û–ì–ò–ö–ê: $LOVE, –ß–ê–¢, –ü–û–î–ï–õ–ò–¢–¨–°–Ø
// ========================

function getShareText() {
  // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º encodeURIComponent –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ URL
  const refLink = `https://t.me/LoveSoulMine_Bot?start=ref_${encodeURIComponent(appState.userAddress || '')}`;
  return `–Ø –∑–∞—Ä–∞–±–æ—Ç–∞–ª ${appState.cache.loveBalance} $LOVE –≤ SoulMine! üíú\n–ú–æ—è AI-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ${appState.coupleProgress.compatibility.toFixed(0)}%\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è ‚Üí ${refLink}`;
}

async function tryShare(shareText) {
  if (!shareText) return false;

  try {
    // ‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢: Telegram WebApp (–≤–Ω—É—Ç—Ä–∏ Telegram)
    if (window.Telegram && window.Telegram.WebApp) {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ë–†–ê–ù–´ –ü–†–û–ë–ï–õ–´
      window.Telegram.WebApp.openLink('https://t.me/LoveSoulMine_Bot');
      showViralToast("üîó –°—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ Telegram! –ü–æ–¥–µ–ª–∏—Å—å –∏ –ø–æ–ª—É—á–∏ +5 $LOVE!");
      localStorage.setItem('shared_love', '1');
      updateQuestProgress("share_achievement");
      return true;
    }

    // ‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã
    if (navigator.share) {
      await navigator.share({ text: shareText });
      localStorage.setItem('shared_love', '1');
      updateQuestProgress("share_achievement");
      return true;
    }
  } catch (err) {
    console.warn('‚ö†Ô∏è Share API failed:', err);
  }

  // ‚úÖ Fallback: –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
  try {
    await navigator.clipboard.writeText(shareText);
    showViralToast("üîó –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! –ü–æ–¥–µ–ª–∏—Å—å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –∏ –ø–æ–ª—É—á–∏ +5 $LOVE!");
    localStorage.setItem('shared_love', '1');
    updateQuestProgress("share_achievement");
    return true;
  } catch (err) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä:', err);
    showViralToast("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é.");
    return false;
  }
}

function showLove(amount) {
  if (amount <= 0) return;

  addLove(amount);

  // –í–∏—Ä—É—Å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: –µ—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª 10+ $LOVE ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
  if (
    appState.userAddress &&
    appState.cache.loveBalance >= 10 &&
    localStorage.getItem('shared_love') !== '1'
  ) {
    setTimeout(() => {
      tryShare(getShareText());
    }, 5000);
  }
}

function addLove(amount) {
  if (!appState.userAddress) return;

  getLoveBalance(appState.userAddress)
    .then(current => {
      const clean = current.replace('‚Äî', '0').replace(/,/g, '');
      const currentNum = parseFloat(clean) || 0;
      const newBalance = currentNum + amount;
      appState.cache.loveBalance = Math.max(0, newBalance); // –ù–µ –Ω–∏–∂–µ –Ω—É–ª—è
      updateUIBalance(newBalance.toFixed(4));
    })
    .catch(err => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', err);
      // Fallback: –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      appState.cache.loveBalance = (appState.cache.loveBalance || 0) + amount;
      updateUIBalance(appState.cache.loveBalance.toFixed(4));
    });
}

function updateUIBalance(balanceStr) {
  const elements = [
    document.getElementById('profile-balance'),
    document.getElementById('profile-balance-profile')
  ];
  elements.forEach(el => {
    if (el) el.textContent = `${balanceStr} $LOVE`;
  });
}

function appendChatMessage(text, sender) {
  const messages = document.getElementById('messages');
  if (!messages) return;

  const msg = document.createElement('div');
  msg.className = sender === 'you' ? 'msg msg-you' : 'msg msg-partner';
  msg.textContent = text;
  messages.appendChild(msg);
  messages.scrollTop = messages.scrollHeight;

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ
  appState.userBehavior.messagesSent++;
  appState.coupleProgress.messages++;

  // –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–≤–µ—Å—Ç—É "swipe_like" ‚Äî –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ = —Å–≤–∞–π–ø
  updateQuestProgress("swipe_like");
}

// ========================
// üéÆ –°–ò–°–¢–ï–ú–ê –ö–í–ï–°–¢–û–í
// ========================

function updateQuestProgress(questId, increment = 1) {
  const quest = appState.quests.find(q => q.id === questId);
  if (!quest || quest.completed) return;

  quest.progress = Math.min(quest.goal, quest.progress + increment);

  if (quest.progress >= quest.goal && !quest.completed) {
    completeQuest(quest);
  }

  saveQuests();
}

function completeQuest(quest) {
  quest.completed = true;

  // üéâ –≠—Ñ—Ñ–µ–∫—Ç—ã
  if (typeof confetti === 'function') {
    confetti({ particleCount: 100, spread: 70, origin: { y: 0.6 } });
  }

  // üí∞ –ù–∞–≥—Ä–∞–¥—ã
  if (quest.reward.love > 0) {
    showLove(quest.reward.love); // –ò—Å–ø–æ–ª—å–∑—É–µ–º showLove –¥–ª—è –≤–∏—Ä—É—Å–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
  }

  if (quest.reward.nft) {
    showNFTModal({ name: quest.reward.nft, image: "üèÜ" });
    unlockAchievement(quest.id, quest.reward.nft, quest.description, "üèÜ");
  }

  saveQuests();

  // ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ—Ä–µ–Ω–¥–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∫–≤–µ—Å—Ç–æ–≤
  if (document.getElementById('quests-list')) {
    renderQuests();
  }
}

function saveQuests() {
  saveToStorage(CONFIG.STORAGE_KEYS.QUESTS, appState.quests);
}

function renderQuests() {
  const container = document.getElementById('quests-list');
  if (!container) return;

  container.innerHTML = '';

  appState.quests.forEach(quest => {
    const progressPercent = Math.min(100, Math.floor((quest.progress / quest.goal) * 100));
    const isCompleted = quest.completed;

    const rewardText = `
      üéÅ +${quest.reward.love} $LOVE${quest.reward.nft ? `, NFT "${quest.reward.nft}"` : ''}
    `;

    const div = document.createElement('div');
    div.className = `quest-item ${isCompleted ? 'completed' : ''}`;
    div.innerHTML = `
      <h3>${quest.title} ${isCompleted ? '‚úÖ' : ''}</h3>
      <p>${quest.description}</p>
      <div class="quest-progress-bar">
        <div class="quest-progress-fill" style="width: ${progressPercent}%"></div>
      </div>
      <p class="quest-progress-text">${quest.progress}/${quest.goal}</p>
      ${isCompleted ? `<div class="quest-reward">${rewardText}</div>` : ''}
    `;
    container.appendChild(div);
  });
}

// ========================
// üèÜ –°–ò–°–¢–ï–ú–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô
// ========================

function unlockAchievement(id, title, description, icon) {
  const achievements = JSON.parse(localStorage.getItem(CONFIG.STORAGE_KEYS.ACHIEVEMENTS) || '[]');
  if (achievements.includes(id)) return;

  achievements.push(id);
  localStorage.setItem(CONFIG.STORAGE_KEYS.ACHIEVEMENTS, JSON.stringify(achievements));

  // üéØ –ú–æ–¥–∞–ª–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  const modal = document.createElement('div');
  modal.className = 'modal';
  modal.style.cssText = `
    position: fixed; top: 0; left: 0; width: 100%; height: 100%;
    background: rgba(0,0,0,0.8); display: flex; align-items: center; justify-content: center;
    z-index: 10000; font-family: system-ui, sans-serif;
  `;
  modal.innerHTML = `
    <div class="modal-content" style="
      background: linear-gradient(135deg, #0a0a2a, #1a1a4a);
      color: #fff; padding: 30px; border-radius: 16px; text-align: center;
      max-width: 90%; box-shadow: 0 12px 40px rgba(0, 209, 178, 0.3);
    ">
      <div style="font-size: 4rem; margin-bottom: 20px;">${icon}</div>
      <h2 style="color: #00D1B2; margin-bottom: 10px;">${title}</h2>
      <p style="margin-bottom: 25px; line-height: 1.5;">${description}</p>
      <button onclick="this.parentElement.parentElement.remove()" class="btn btn-primary" style="
        width: 100%; padding: 12px; border: none; border-radius: 8px;
        background: linear-gradient(135deg, #00D1B2, #00F0E9); color: #000; font-weight: bold;
      ">–ó–∞–∫—Ä—ã—Ç—å</button>
    </div>
  `;
  document.body.appendChild(modal);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫, –µ—Å–ª–∏ –Ω–µ –Ω–∞–∂–∞–ª–∏
  setTimeout(() => {
    if (modal.parentElement) modal.parentElement.remove();
  }, 5000);
}

// ========================
// üíû –ü–ê–†–ù–´–ï NFT
// ========================

function checkCoupleNFTs() {
  const COUPLE_NFTS = [
    { id: "first_night", name: "–ü–µ—Ä–≤–∞—è –Ω–æ—á—å", required_messages: 50, image: "üåô" },
    { id: "couple_month", name: "–ü–∞—Ä–∞ –º–µ—Å—è—Ü–∞", required_days: 30, image: "üèÜ" },
    { id: "eternal_match", name: "–í–µ—á–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", required_compatibility: 99, image: "‚ö°" }
  ];

  COUPLE_NFTS.forEach(nft => {
    const key = `soulmine_couple_nft_${nft.id}`;
    if (localStorage.getItem(key)) return;

    let earned = false;
    if (nft.required_messages && appState.coupleProgress.messages >= nft.required_messages) earned = true;
    if (nft.required_days && appState.coupleProgress.days_active >= nft.required_days) earned = true;
    if (nft.required_compatibility && appState.coupleProgress.compatibility >= nft.required_compatibility) earned = true;

    if (earned) {
      localStorage.setItem(key, '1');
      showNFTModal(nft);
      saveCoupleNFT(nft);
    }
  });
}

function saveCoupleNFT(nft) {
  const container = document.getElementById('couple-nft-container-profile') || document.getElementById('couple-nft-container');
  if (!container) return;

  const div = document.createElement('div');
  div.className = 'nft-item';
  div.innerHTML = `
    <div style="font-size:2.5em; display:flex; align-items:center; justify-content:center; height:100%;">${nft.image}</div>
    <div class="nft-overlay">${nft.name}</div>
  `;
  container.appendChild(div);

  const section = document.getElementById('couple-nft-section');
  if (section) section.style.display = 'block';
}

// ========================
// üìû –ò–°–¢–û–†–ò–Ø –ó–í–û–ù–ö–û–í
// ========================

function loadCallHistory() {
  if (!appState.userAddress) return;

  const key = `${CONFIG.STORAGE_KEYS.CALL_HISTORY}${appState.userAddress}`;
  const saved = loadFromStorage(key, []);
  appState.callHistory = saved;
}

function saveCallHistory() {
  if (!appState.userAddress) return;

  const key = `${CONFIG.STORAGE_KEYS.CALL_HISTORY}${appState.userAddress}`;
  saveToStorage(key, appState.callHistory);

  // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ TON-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞–∂–¥—ã–µ 5 –∑–∞–ø–∏—Å–µ–π (–µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞)
  if (appState.callHistory.length % 5 === 0 && typeof saveToTonStorage === 'function') {
    saveToTonStorage(appState.callHistory, `call_history_${appState.userAddress}.json`);
  }
}

function renderCallHistory() {
  const container = document.getElementById('call-history-list');
  if (!container) return;

  if (appState.callHistory.length === 0) {
    container.innerHTML = '<p class="empty-state">–ò—Å—Ç–æ—Ä–∏—è –∑–≤–æ–Ω–∫–æ–≤ –ø—É—Å—Ç–∞</p>';
    return;
  }

  container.innerHTML = '';
  [...appState.callHistory].reverse().forEach(call => {
    const date = new Date(call.startTime).toLocaleString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });

    const partner = call.partner ? `${call.partner.slice(0, 6)}...${call.partner.slice(-4)}` : '‚Äî';

    const div = document.createElement('div');
    div.className = 'call-record';
    div.innerHTML = `
      <p><strong>–°–æ–±–µ—Å–µ–¥–Ω–∏–∫:</strong> ${partner}</p>
      <p><strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> ${call.duration || 0} –º–∏–Ω</p>
      <p><strong>–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:</strong> ${(call.compatibility || 0).toFixed(1)}%</p>
      <p><strong>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</strong> ${call.earnedLove?.toFixed(2) || '0.00'} $LOVE</p>
      <p><strong>–î–∞—Ç–∞:</strong> ${date}</p>
      <hr style="margin: 12px 0;">
    `;
    container.appendChild(div);
  });
}

// ========================
// üñ•Ô∏è –ù–ê–í–ò–ì–ê–¶–ò–Ø –ò –°–ö–†–ò–ù–´
// ========================

window.showScreen = function(id) {
  const screens = ['main-screen', 'chat-screen', 'profile', 'quests', 'history', 'dao', 'contacts', 'swipe-screen'];
  screens.forEach(s => {
    const el = document.getElementById(s);
    if (el) el.style.display = 'none';
  });

  const target = document.getElementById(id);
  if (target) target.style.display = 'block';

  document.querySelectorAll('.nav-btn').forEach(btn => btn.classList.remove('active'));
  const activeBtn = document.querySelector(`.nav-btn[onclick="showScreen('${id}')"]`);
  if (activeBtn) activeBtn.classList.add('active');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç–∫—Ä–∞–Ω—É
  switch (id) {
    case 'main-screen':
      document.querySelector('.movement-banner')?.style.setProperty('display', 'block');
      break;
    case 'profile':
      if (appState.connector?.connected && appState.userAddress) {
        getLoveBalance(appState.userAddress).then(b => updateUIBalance(b));
        loadNFTs(appState.userAddress);
        checkCoupleNFTs();

        const statsEl = document.getElementById('user-stats');
        if (statsEl) {
          statsEl.innerHTML = `
            <p>–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${appState.userBehavior.messagesSent}</p>
            <p>–ó–≤–æ–Ω–∫–æ–≤ —Å–æ–≤–µ—Ä—à–µ–Ω–æ: ${appState.userBehavior.initiatedChats}</p>
            <p>–ö–≤–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${appState.quests.filter(q => q.completed).length}</p>
            <p>$LOVE –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${appState.cache.loveBalance?.toFixed(4) || '0.0000'}</p>
          `;
        }
      }
      break;
    case 'quests':
      renderQuests();
      break;
    case 'history':
      loadCallHistory();
      renderCallHistory();
      break;
    case 'dao':
      loadCitizenNFT();
      loadProposals();
      break;
    case 'contacts':
      loadTelegramContacts();
      break;
  }
};

// ========================
// üñºÔ∏è NFT –ú–û–î–ê–õ–ö–ê
// ========================

function showNFTModal(nft) {
  const modal = document.getElementById('nft-modal');
  if (!modal) return;

  const name = nft.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π NFT';
  const image = nft.image || 'üñºÔ∏è';

  document.getElementById('nft-name')?.textContent = `"${name}"`;
  document.getElementById('nft-image')?.innerHTML = `<div style="font-size: 4rem;">${image}</div>`;
  modal.style.display = 'flex';
}

function closeModal() {
  const modal = document.getElementById('nft-modal');
  if (modal) modal.style.display = 'none';
}

// ========================
// üåü –í–ò–†–£–°–ù–´–ï UI-–≠–õ–ï–ú–ï–ù–¢–´
// ========================

function showViralToast(message) {
  const toast = document.createElement('div');
  toast.style.cssText = `
    position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%);
    background: linear-gradient(135deg, #00D1B2, #00F0E9);
    color: #00005B; padding: 15px 20px; border-radius: 12px; z-index: 10000;
    font-weight: bold; box-shadow: 0 4px 20px rgba(0, 209, 178, 0.4);
    animation: slideUp 0.5s ease-out;
    font-family: system-ui, sans-serif;
  `;
  toast.textContent = message;
  document.body.appendChild(toast);

  setTimeout(() => {
    if (toast.parentElement) toast.remove();
  }, 4000);
}

function triggerMiningEffect(text) {
  const effect = document.createElement('div');
  effect.textContent = text;
  effect.style.cssText = `
    position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);
    color: #6a0dad; font-weight: bold; font-size: 20px; z-index: 1000;
    opacity: 0; pointer-events: none; text-shadow: 0 0 5px rgba(106, 13, 173, 0.5);
    transition: opacity 0.3s ease-out;
    font-family: system-ui, sans-serif;
  `;
  document.body.appendChild(effect);
  setTimeout(() => effect.style.opacity = '1', 10);
  setTimeout(() => effect.style.opacity = '0', 2000);
  setTimeout(() => effect.remove(), 2500);
}

// ========================
// üß© –ó–ê–ì–õ–£–®–ö–ò (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ ‚Äî –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ API)
// ========================

function getLoveBalance(address) {
  // ‚úÖ –ó–ê–ú–ï–ù–ò–¢–¨ –ù–ê –†–ï–ê–õ–¨–ù–´–ô –í–´–ó–û–í –ö–û–ù–¢–†–ê–ö–¢–ê (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ TonConnect)
  return Promise.resolve("0.0000");
}

function loadNFTs(address) {
  console.log('loadNFTs not implemented', address);
}

function loadCitizenNFT() {
  console.log('loadCitizenNFT not implemented');
}

function loadProposals() {
  console.log('loadProposals not implemented');
}

function saveToTonStorage(data, filename) {
  console.log('saveToTonStorage not implemented', filename, data);
}

function connectToSignalingServer() {
  console.log('connectToSignalingServer not implemented');
}

function showPartnerPreview() {
  const models = ['model01', 'model02', 'model03', 'model04', 'model05', 'model06', 'model11', 'model44', 'model66'];
  const randomModel = models[Math.floor(Math.random() * models.length)];
  const img = document.getElementById('partner-preview');
  if (img) {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ë–†–ê–ù –ü–†–û–ë–ï–õ –ü–ï–†–ï–î ${randomModel}
    img.src = `https://soulmine-web.vercel.app/assets/models/${randomModel}.png`;
    img.style.display = 'block';
  }
}

function loadTelegramContacts() {
  console.log('loadTelegramContacts not implemented');
}

// ========================
// üîÑ –≠–ö–°–ü–û–†–¢ –í –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–™–ï–ö–¢
// ========================

window.appState = appState;
window.CONFIG = CONFIG;
window.showLove = showLove;
window.appendChatMessage = appendChatMessage;
window.showScreen = showScreen;
window.updateQuestProgress = updateQuestProgress;
window.completeQuest = completeQuest;
window.renderQuests = renderQuests;
window.checkCoupleNFTs = checkCoupleNFTs;
window.loadCallHistory = loadCallHistory;
window.saveCallHistory = saveCallHistory;
window.renderCallHistory = renderCallHistory;
window.showPartnerPreview = showPartnerPreview;
window.unlockAchievement = unlockAchievement;
window.showViralToast = showViralToast;
window.tryShare = tryShare;
window.getShareText = getShareText;

// ========================
// üßπ –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–†–ò –í–´–•–û–î–ï
// ========================

window.addEventListener('beforeunload', () => {
  saveToStorage(CONFIG.STORAGE_KEYS.USER_ADDRESS, appState.userAddress);
  saveToStorage(CONFIG.STORAGE_KEYS.SOUL_AI, appState.soulAI);
  saveToStorage(CONFIG.STORAGE_KEYS.USER_BEHAVIOR, appState.userBehavior);
  saveToStorage(CONFIG.STORAGE_KEYS.QUESTS, appState.quests);
  saveCallHistory(); // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–≤–æ–Ω–∫–æ–≤
});
