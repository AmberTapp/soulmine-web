// dao.js

// –ó–∞–≥—Ä—É–∑–∫–∞ NFT –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞
function loadCitizenNFT() {
  const levelEl = document.getElementById('citizen-nft-level');
  if (!levelEl) return;
  const nft = localStorage.getItem('soulmine_citizen_nft');
  if (nft) {
    const data = JSON.parse(nft);
    levelEl.textContent = `${data.name} (–£—Ä–æ–≤–µ–Ω—å ${data.level})`;
  } else {
    levelEl.textContent = "–ù–µ –≤—ã–¥–∞–Ω–æ. –°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∑–≤–æ–Ω–æ–∫!";
  }
}

// –í—ã–¥–∞—á–∞ NFT –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ (–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–≤–æ–Ω–∫–µ)
async function awardCitizenNFT() {
  if (localStorage.getItem('soulmine_citizen_nft_issued')) return;
  const citizenNFT = {
    id: "citizen_level_1",
    name: "–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω SoulMine",
    description: "–í–∞—à –≥–æ–ª–æ—Å –≤ DAO. –£—Ä–æ–≤–µ–Ω—å 1.",
    image: "üèõÔ∏è",
    level: 1,
    issuedAt: new Date().toISOString()
  };
  localStorage.setItem('soulmine_citizen_nft', JSON.stringify(citizenNFT));
  localStorage.setItem('soulmine_citizen_nft_issued', 'true');
  showNFTModal(citizenNFT);
  const metadataUrl = await saveToTonStorage(citizenNFT, `citizen_nft_${window.userAddress}.json`);
  if (metadataUrl) {
    const botUrl = `https://t.me/LoveSoulMine_Bot?start=claim_nft_citizen_${encodeURIComponent(metadataUrl)}`;
    window.open(botUrl, '_blank');
  }
  console.log('üèõÔ∏è –í—ã–¥–∞–Ω–æ NFT –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ DAO');
}

// –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞
function upgradeCitizenLevel() {
  const citizenStr = localStorage.getItem('soulmine_citizen_nft');
  if (!citizenStr) return;
  const citizen = JSON.parse(citizenStr);
  const totalCalls = window.callHistory.length;
  const totalMessages = window.userBehavior.messagesSent;
  const newLevel = Math.min(5, 1 + Math.floor(totalCalls / 5) + Math.floor(totalMessages / 100));
  if (newLevel > (citizen.level || 0)) {
    citizen.level = newLevel;
    citizen.upgradedAt = new Date().toISOString();
    localStorage.setItem('soulmine_citizen_nft', JSON.stringify(citizen));
    saveToTonStorage(citizen, `citizen_nft_${window.userAddress}.json`).then(url => {
      if (url) {
        const botUrl = `https://t.me/LoveSoulMine_Bot?start=upgrade_nft_level_${newLevel}_url_${encodeURIComponent(url)}`;
        window.open(botUrl, '_blank');
      }
    });
    console.log(`üèõÔ∏è –£—Ä–æ–≤–µ–Ω—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –ø–æ–≤—ã—à–µ–Ω –¥–æ ${newLevel}`);
    loadCitizenNFT();
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
async function loadProposals() {
  const container = document.getElementById('proposals-list');
  if (!container) return;
  container.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...</p>';
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É DAO
    const proposals = [
      {
        id: 1,
        title: "–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä '–ö–æ—Ç–∏–∫–∏'",
        description: "AR-—Ñ–∏–ª—å—Ç—Ä —Å –∫–æ—Ç–∏–∫–∞–º–∏ –≤–æ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞",
        votesFor: 1240,
        votesAgainst: 310,
        totalSupplySnapshot: 50000,
        status: 0
      },
      {
        id: 2,
        title: "–†–∞–∑–¥–∞—Ç—å 10,000 $LOVE –Ω–æ–≤–∏—á–∫–∞–º",
        description: "Airdrop –¥–ª—è –ø–µ—Ä–≤—ã—Ö 1000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        votesFor: 890,
        votesAgainst: 610,
        totalSupplySnapshot: 50000,
        status: 0
      }
    ];
    renderProposals(proposals);
  } catch (error) {
    container.innerHTML = `<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}</p>`;
  }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
function renderProposals(proposals) {
  const container = document.getElementById('proposals-list');
  if (!container) return;
  container.innerHTML = '';
  if (proposals.length === 0) {
    container.innerHTML = '<p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</p>';
    return;
  }
  proposals.forEach(p => {
    const totalVotes = p.votesFor + p.votesAgainst;
    const quorum = p.totalSupplySnapshot * 0.05;
    const hasQuorum = totalVotes >= quorum;
    const percentFor = totalVotes > 0 ? (p.votesFor / totalVotes * 100).toFixed(1) : 0;
    let statusText = '‚è≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ';
    let statusClass = 'status-active';
    if (p.status === 1) { statusText = '‚úÖ –ü—Ä–∏–Ω—è—Ç–æ'; statusClass = 'status-passed'; }
    else if (p.status === 2) { statusText = '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ'; statusClass = 'status-rejected'; }
    const div = document.createElement('div');
    div.className = 'proposal-item';
    div.innerHTML = `
      <h3>${p.title}</h3>
      <p>${p.description}</p>
      <p><strong>–ì–æ–ª–æ—Å–æ–≤ "–ó–∞":</strong> ${p.votesFor.toLocaleString()} $LOVE ‚Äî ${percentFor}%</p>
      <p><strong>–ì–æ–ª–æ—Å–æ–≤ "–ü—Ä–æ—Ç–∏–≤":</strong> ${p.votesAgainst.toLocaleString()} $LOVE</p>
      <p><strong>–ö–≤–æ—Ä—É–º:</strong> ${hasQuorum ? '‚úÖ' : '‚ùå'} (–Ω—É–∂–Ω–æ: ${quorum.toLocaleString()} $LOVE)</p>
      <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <span class="${statusClass}">${statusText}</span></p>
      <div style="display:flex; gap:10px; margin-top:10px;">
        <button class="vote-btn" onclick="voteProposal(${p.id}, 1)">üó≥Ô∏è –ó–∞</button>
        <button class="vote-btn" onclick="voteProposal(${p.id}, 0)">üó≥Ô∏è –ü—Ä–æ—Ç–∏–≤</button>
      </div>
      <hr>
    `;
    container.appendChild(div);
  });
}

// –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
async function voteProposal(proposalId, support = 1) {
  if (!window.userAddress) {
    alert('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!');
    return;
  }
  try {
    const loveBalance = await getLoveBalanceRaw(window.userAddress);
    if (loveBalance <= 0) {
      alert('–ù—É–∂–µ–Ω –±–∞–ª–∞–Ω—Å $LOVE –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è!');
      return;
    }
    alert(`üó≥Ô∏è –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç–µ–Ω! –í–µ—Å: ${loveBalance} $LOVE
(–í –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —ç–º—É–ª–∏—Ä—É–µ—Ç—Å—è)`);
    setTimeout(loadProposals, 2000);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', error);
    alert('–û—à–∏–±–∫–∞: ' + error.message);
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
function createProposal() {
  if (!window.userAddress) {
    alert('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!');
    return;
  }
  const title = prompt('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:');
  if (!title) return;
  const description = prompt('–û–ø–∏—Å–∞–Ω–∏–µ:');
  if (!description) return;
  alert('üìù –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! (–í –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ —ç–º—É–ª–∏—Ä—É–µ—Ç—Å—è)');
  setTimeout(loadProposals, 1000);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ TON Storage (–¥–µ–º–æ)
async function saveToTonStorage(data, filename) {
  try {
    const storageItem = {
      version: "1.0",
      owner: window.userAddress,
      timestamp: Date.now(),
      data
    };
    const content = btoa(JSON.stringify(storageItem));
    const blob = new Blob([content], { type: 'application/json' });
    const mockStorageUrl = `https://ton-storage.example/${encodeURIComponent(filename)}`;
    console.log('üíæ [–î–ï–ú–û] –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ TON Storage:', filename, '‚Üí', mockStorageUrl);
    return mockStorageUrl;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ TON Storage:', error);
    return null;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
window.loadCitizenNFT = loadCitizenNFT;
window.awardCitizenNFT = awardCitizenNFT;
window.upgradeCitizenLevel = upgradeCitizenLevel;
window.loadProposals = loadProposals;
window.voteProposal = voteProposal;
window.createProposal = createProposal;
window.saveToTonStorage = saveToTonStorage;