// contacts.js ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –∞ —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥ –∞–ø–æ—Å—Ç–æ–ª–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è #LoveOnTON

import { appState } from './utils.js';

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ Telegram WebApp ‚Äî –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥—É –∞–ø–æ—Å—Ç–æ–ª–æ–≤
 */
async function loadTelegramContacts() {
  if (!window.Telegram?.WebApp) {
    console.warn('Telegram WebApp –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
    showViralToast("üì± –û—Ç–∫—Ä–æ–π—Ç–µ SoulMine —á–µ—Ä–µ–∑ Telegram –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º!");
    return;
  }

  const webApp = window.Telegram.WebApp;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø
  webApp.showPopup({
    title: "–ù–∞–π–¥–∏—Ç–µ –¥—Ä—É–∑–µ–π –≤ SoulMine üíú",
    message: "–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤ –Ω–∞—à–µ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π!",
    buttons: [
      { type: "ok", text: "–†–∞–∑—Ä–µ—à–∏—Ç—å" },
      { type: "cancel", text: "–ü–æ–∑–∂–µ" }
    ]
  }, (buttonId) => {
    if (buttonId === "ok") {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –±–æ—Ç—É
      if (webApp.sendData) {
        webApp.sendData(JSON.stringify({
          type: "request_contacts",
          address: appState.userAddress
        }));
        showViralToast("üì® –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–æ—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...");
      } else {
        // Fallback: –∏–º–∏—Ç–∞—Ü–∏—è
        setTimeout(() => {
          mockLoadContacts();
        }, 1500);
      }
    }
  });
}

/**
 * –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ ‚Äî –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞)
 */
function mockLoadContacts() {
  const mockContacts = [
    { 
      name: "–ê–Ω–Ω–∞", 
      telegram_id: 123456789, 
      ton_address: "EQAbc...def", 
      is_on_soulmine: true,
      last_active: "—Å–µ–≥–æ–¥–Ω—è"
    },
    { 
      name: "–ú–∞—Ä–∫", 
      telegram_id: 987654321, 
      ton_address: null, 
      is_on_soulmine: false,
      last_active: null
    },
    { 
      name: "–õ–∏–∑–∞", 
      telegram_id: 456789123, 
      ton_address: "EQGhi...jkl", 
      is_on_soulmine: true,
      last_active: "3 –¥–Ω—è –Ω–∞–∑–∞–¥"
    },
    { 
      name: "–î–º–∏—Ç—Ä–∏–π", 
      telegram_id: 321654987, 
      ton_address: null, 
      is_on_soulmine: false,
      last_active: null
    }
  ];

  appState.contacts.telegram = mockContacts;
  renderContacts();
  unlockAchievement('contacts_loaded', '–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –ì—É—Ä—É', '–ó–∞–≥—Ä—É–∑–∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ Telegram!', 'üë•');
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π SoulMine –ø–æ —Å–ø–∏—Å–∫—É –∞–¥—Ä–µ—Å–æ–≤
 */
async function loadTONContacts(addresses) {
  if (!addresses?.length) return;

  try {
    const promises = addresses.map(addr => 
      fetch(`https://tonapi.io/v2/accounts/${addr}`)
        .then(r => r.json())
        .catch(() => null)
    );

    const results = await Promise.all(promises);
    appState.contacts.ton = results
      .filter(acc => acc && acc.name)
      .map(acc => ({
        name: acc.name || `User ${acc.address.slice(-4)}`,
        ton_address: acc.address,
        profile_image: acc.profile_image,
        last_active: new Date().toLocaleDateString('ru-RU')
      }));

    renderContacts();
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ TON –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', e);
  }
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ UI ‚Äî —Ç–≤–æ—è —Å–µ—Ç—å –∞–ø–æ—Å—Ç–æ–ª–æ–≤ –ª—é–±–≤–∏
 */
function renderContacts() {
  const container = document.getElementById('contacts-list');
  if (!container) return;

  container.innerHTML = '';

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –≤ SoulMine
  const soulmineUsers = [
    ...appState.contacts.telegram.filter(c => c.is_on_soulmine && c.ton_address),
    ...appState.contacts.ton
  ];

  if (soulmineUsers.length === 0) {
    container.innerHTML = `
      <div class="nft-empty">
        <p>–ù–µ—Ç –¥—Ä—É–∑–µ–π –≤ SoulMine üòî</p>
        <p>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π ‚Äî —Å—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥—Ü–µ–º!</p>
        <button onclick="inviteAllFriends()" class="btn btn-primary" style="margin-top: 20px; width: 100%;">
          üíå –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π
        </button>
      </div>
    `;
    return;
  }

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const activeHeader = document.createElement('h3');
  activeHeader.textContent = "–ê–∫—Ç–∏–≤–Ω—ã–µ –≤ SoulMine";
  activeHeader.style.cssText = "margin: 20px 0 10px 0; color: #00d1b2; border-bottom: 1px solid rgba(0, 209, 178, 0.3); padding-bottom: 5px;";
  container.appendChild(activeHeader);

  soulmineUsers.forEach(user => {
    const div = document.createElement('div');
    div.className = 'contact-item';
    div.innerHTML = `
      <div style="display: flex; align-items: center; gap: 12px; flex: 1;">
        <img src="${user.profile_image || './assets/logo.png'}" class="contact-avatar" onerror="this.src='./assets/logo.png'">
        <div style="flex: 1;">
          <h4 style="margin: 0 0 5px 0; color: white;">${user.name}</h4>
          <p style="font-size: 0.8rem; opacity: 0.7; margin: 0;">${user.ton_address?.slice(0, 6)}...${user.ton_address?.slice(-4)}</p>
          ${user.last_active ? `<p style="font-size: 0.7rem; color: #00d1b2; margin: 5px 0 0 0;">–ê–∫—Ç–∏–≤–µ–Ω: ${user.last_active}</p>` : ''}
        </div>
      </div>
      <div style="display: flex; gap: 8px; min-width: max-content;">
        <button onclick="startChatWith('${user.ton_address}')" class="btn btn-secondary" style="padding: 6px 12px; font-size: 12px;">üí¨</button>
        <button onclick="startCallWith('${user.ton_address}')" class="btn btn-primary" style="padding: 6px 12px; font-size: 12px;">üìû</button>
      </div>
    `;
    container.appendChild(div);
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Ö, –∫–æ–≥–æ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å
  const inviteUsers = appState.contacts.telegram.filter(c => !c.is_on_soulmine);
  if (inviteUsers.length > 0) {
    const inviteHeader = document.createElement('h3');
    inviteHeader.textContent = "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –≤ SoulMine";
    inviteHeader.style.cssText = "margin: 30px 0 10px 0; color: #ffcc00; border-bottom: 1px solid rgba(255, 204, 0, 0.3); padding-bottom: 5px;";
    container.appendChild(inviteHeader);

    inviteUsers.forEach(user => {
      const div = document.createElement('div');
      div.className = 'contact-item';
      div.innerHTML = `
        <div style="display: flex; align-items: center; gap: 12px; flex: 1;">
          <div style="width: 50px; height: 50px; background: linear-gradient(135deg, #00d1b2, #00a8cc); border-radius: 50%; display: flex; align-items: center; justify-content: center; color: #00005B; font-weight: bold; font-size: 1.2rem;">
            ${user.name.charAt(0).toUpperCase()}
          </div>
          <div style="flex: 1;">
            <h4 style="margin: 0 0 5px 0; color: white;">${user.name}</h4>
            <p style="font-size: 0.8rem; color: #ffcc00; margin: 0;">–ù–µ –≤ SoulMine</p>
          </div>
        </div>
        <button onclick="inviteUser(${user.telegram_id}, '${user.name}')" class="btn btn-primary" style="padding: 6px 12px; font-size: 12px;">‚ûï –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å</button>
      `;
      container.appendChild(div);
    });

    // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤—Å–µ—Ö"
    const inviteAllBtn = document.createElement('button');
    inviteAllBtn.textContent = "üíå –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π";
    inviteAllBtn.className = "btn btn-primary";
    inviteAllBtn.style.cssText = "margin: 20px 0; width: 100%; padding: 12px;";
    inviteAllBtn.onclick = inviteAllFriends;
    container.appendChild(inviteAllBtn);
  }
}

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 */
function startChatWith(address) {
  if (!address) {
    alert('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤ SoulMine!');
    return;
  }
  
  appState.callPartnerAddress = address;
  showScreen('chat-screen');
  showViralToast(`üí¨ –ß–∞—Ç —Å ${address.slice(0,6)}... –æ—Ç–∫—Ä—ã—Ç!`);
}

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç –∑–≤–æ–Ω–æ–∫ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 */
function startCallWith(address) {
  if (!address) {
    alert('–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤ SoulMine!');
    return;
  }
  
  appState.callPartnerAddress = address;
  startVideoCall();
  updateQuestProgress("call_with_contact");
  unlockAchievement('first_contact_call', '–°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å –°–µ—Ä–¥–µ—Ü', '–°–æ–≤–µ—Ä—à–∏–ª–∏ –∑–≤–æ–Ω–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—É!', 'üìû');
}

/**
 * –ü—Ä–∏–≥–ª–∞—à–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ SoulMine
 */
function inviteUser(telegramId, name) {
  if (!appState.userAddress) {
    alert('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è!');
    return;
  }

  const inviteLink = `https://t.me/LoveSoulMine_Bot?start=ref_${appState.userAddress}`;
  
  if (window.Telegram?.WebApp?.sendData) {
    window.Telegram.WebApp.sendData(JSON.stringify({
      type: "invite_user",
      telegram_id: telegramId,
      invite_link: inviteLink,
      inviter_address: appState.userAddress
    }));
    showViralToast(`‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${name}!`);
    updateQuestProgress("invite_friend");
  } else {
    // Fallback: –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
    navigator.clipboard.writeText(inviteLink);
    showViralToast(`üìã –°—Å—ã–ª–∫–∞ –¥–ª—è ${name} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –≤ Telegram.`);
  }
  
  unlockAchievement('first_invite', '–ê–º–±–∞—Å—Å–∞–¥–æ—Ä –õ—é–±–≤–∏', '–ü—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞!', 'üíå');
}

/**
 * –ü—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤—Å–µ—Ö –¥—Ä—É–∑–µ–π —Å—Ä–∞–∑—É
 */
function inviteAllFriends() {
  if (!appState.userAddress) {
    alert('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è!');
    return;
  }

  const inviteLink = `https://t.me/LoveSoulMine_Bot?start=ref_${appState.userAddress}`;
  const inviteUsers = appState.contacts.telegram.filter(c => !c.is_on_soulmine);
  
  if (inviteUsers.length === 0) {
    alert('–ù–µ—Ç –¥—Ä—É–∑–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è!');
    return;
  }

  if (window.Telegram?.WebApp?.sendData) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ—Ç—É —Å–ø–∏—Å–æ–∫ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    window.Telegram.WebApp.sendData(JSON.stringify({
      type: "invite_multiple_users",
      telegram_ids: inviteUsers.map(u => u.telegram_id),
      invite_link: inviteLink,
      inviter_address: appState.userAddress
    }));
    showViralToast(`üöÄ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${inviteUsers.length} –¥—Ä—É–∑—å—è–º!`);
  } else {
    // Fallback: –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
    navigator.clipboard.writeText(inviteLink);
    showViralToast(`üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –≤—Å–µ–º –¥—Ä—É–∑—å—è–º.`);
  }
  
  updateQuestProgress("invite_friend", inviteUsers.length);
  unlockAchievement('mass_invite', '–†–µ–∫—Ä—É—Ç–µ—Ä –õ—é–±–≤–∏', `–ü—Ä–∏–≥–ª–∞—Å–∏–ª–∏ ${inviteUsers.length} –¥—Ä—É–∑–µ–π!`, 'üöÄ');
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.loadTelegramContacts = loadTelegramContacts;
window.loadTONContacts = loadTONContacts;
window.renderContacts = renderContacts;
window.startChatWith = startChatWith;
window.startCallWith = startCallWith;
window.inviteUser = inviteUser;
window.inviteAllFriends = inviteAllFriends;

// –•–µ–ª–ø–µ—Ä—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–∑ utils.js)
function showViralToast(message) {
  if (typeof window.showViralToast === 'function') {
    window.showViralToast(message);
  } else {
    alert(message);
  }
}

function unlockAchievement(id, title, description, icon) {
  if (typeof window.unlockAchievement === 'function') {
    window.unlockAchievement(id, title, description, icon);
  }
}

function updateQuestProgress(questId, increment = 1) {
  if (typeof window.updateQuestProgress === 'function') {
    window.updateQuestProgress(questId, increment);
  }
}

function showScreen(screenId) {
  if (typeof window.showScreen === 'function') {
    window.showScreen(screenId);
  }
}

function startVideoCall() {
  if (typeof window.startVideoCall === 'function') {
    window.startVideoCall();
  }
}