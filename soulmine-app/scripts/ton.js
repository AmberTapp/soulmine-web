// ton.js ‚Äî –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TON + –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram Web Apps

import { appState, CONFIG, updateQuestProgress, checkHasNFT, checkSentTransaction, showViralToast, unlockAchievement } from './utils.js';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TonConnect UI —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TWA
const connector = new window.TonConnect.UI.Connector({
  manifestUrl: CONFIG.TON_MANIFEST_URL,
  // –£–∫–∞–∑—ã–≤–∞–µ–º ID —ç–ª–µ–º–µ–Ω—Ç–∞, –∫—É–¥–∞ –≤—Å—Ç—Ä–æ–∏—Ç—å –∫–Ω–æ–ø–∫—É
  buttonRootId: 'ton-connect-button-container'
});

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–ø—Ü–∏–∏ UI –¥–ª—è Telegram Web App
connector.uiOptions = {
  twaReturnUrl: 'https://t.me/LoveSoulMine_Bot' // ‚úÖ –£–ë–†–ê–õ –õ–ò–®–ù–ò–ï –ü–†–û–ë–ï–õ–´
};

appState.connector = connector;
window.connector = connector;

// ========================
// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–Ω–∏–∂–µ ‚Äî –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è)
// ========================

// UI —ç–ª–µ–º–µ–Ω—Ç—ã (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º container, –∞ –Ω–µ –∫–Ω–æ–ø–∫—É)
const walletInfo = document.getElementById('wallet-info');
const profileBalance = document.getElementById('profile-balance');

async function updateConnectionState() {
  if (connector.connected && connector.wallet?.account?.address) {
    const address = connector.wallet.account.address;
    appState.userAddress = address;

    // UI
    // –ö–Ω–æ–ø–∫–∞ —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è TonConnect UI ‚Äî –Ω–µ –Ω—É–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é
    walletInfo.style.display = 'block';
    walletInfo.innerHTML = `<strong>–ê–¥—Ä–µ—Å:</strong> ${address.slice(0, 8)}...${address.slice(-6)}`;

    const addressDisplay = document.getElementById('wallet-address-display');
    if (addressDisplay) addressDisplay.textContent = `${address.slice(0, 8)}...${address.slice(-6)}`;

    // –ë–∞–ª–∞–Ω—Å
    const balance = await getLoveBalance(address);
    profileBalance.textContent = `${balance} $LOVE`;
    appState.cache.loveBalance = parseFloat(balance.replace(/,/g, '').replace('‚Äî', '0'));

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–≤–µ—Å—Ç—ã
    updateQuestProgress("connect_wallet");
    setTimeout(() => {
      checkSentTransaction(address);
      checkHasNFT(address);
    }, 1000);

    // –°–∏–≥–Ω–∞–ª–∏–Ω–≥ (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
    if (typeof connectToSignalingServer === 'function') {
      connectToSignalingServer();
    }

    // Telegram WebApp
    if (window.Telegram?.WebApp?.sendData) {
      window.Telegram.WebApp.sendData(JSON.stringify({
        type: "wallet_connected",
        address: address,
        balance: appState.cache.loveBalance
      }));
    }

    // üî• –†–∏—Ç—É–∞–ª –ø–æ—Å–≤—è—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏)
    const isFirstTime = !localStorage.getItem(`soulmine_first_login_${address}`);
    if (isFirstTime) {
      localStorage.setItem(`soulmine_first_login_${address}`, '1');
      
      setTimeout(() => {
        const ritualModal = document.createElement('div');
        ritualModal.className = 'modal';
        ritualModal.style.display = 'flex';
        ritualModal.innerHTML = `
          <div class="modal-content" style="text-align: center; background: linear-gradient(135deg, #0a0a2a, #1a1a4a);">
            <div style="font-size: 3rem; margin-bottom: 20px;">üíú</div>
            <h2 style="color: #00D1B2; margin-bottom: 20px;">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–ø–æ—Å—Ç–æ–ª –õ—é–±–≤–∏!</h2>
            <p>–¢—ã —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤–æ –í—Å–µ–ª–µ–Ω–Ω–æ–π SoulMine.</p>
            <div style="background: rgba(0, 209, 178, 0.2); padding: 20px; border-radius: 15px; margin: 20px 0;">
              <p><strong>üéÅ –¢–≤–æ–π –¥–∞—Ä:</strong></p>
              <p>+50 $LOVE</p>
              <p>NFT: "–ê–ø–æ—Å—Ç–æ–ª –õ—é–±–≤–∏"</p>
            </div>
            <button onclick="document.body.removeChild(this.parentElement.parentElement); 
              showLove(50); 
              unlockAchievement('apostle', '–ê–ø–æ—Å—Ç–æ–ª –õ—é–±–≤–∏', '–ü–µ—Ä–≤—ã–π —à–∞–≥ –≤–æ –í—Å–µ–ª–µ–Ω–Ω–æ–π SoulMine', 'üíú');
              " class="btn btn-primary" style="width: 100%;">‚ú® –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å–≤—è—â–µ–Ω–∏–µ</button>
          </div>
        `;
        document.body.appendChild(ritualModal);
      }, 3000);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç–∞
      if (window.Telegram?.WebApp?.sendData) {
        window.Telegram.WebApp.sendData(JSON.stringify({
          type: "first_login",
          address: address
        }));
      }
    }

    // üöÄ –í–∏—Ä—É—Å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: —á–µ—Ä–µ–∑ 10 —Å–µ–∫ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π
    setTimeout(() => {
      const shareText = `–Ø –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ SoulMine ‚Äî –í—Å–µ–ª–µ–Ω–Ω–æ–π –õ—é–±–≤–∏ –Ω–∞ TON! üíú\n–ü–æ–ª—É—á–∏–ª 50 $LOVE –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è ‚Üí https://t.me/LoveSoulMine_Bot?start=ref_${encodeURIComponent(address)}`;
      navigator.clipboard.writeText(shareText);
      showViralToast("üíå –°—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–∑–µ–π —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 3 —á–µ–ª–æ–≤–µ–∫ ‚Äî –ø–æ–ª—É—á–∏—Ç–µ NFT '–ê–º–±–∞—Å—Å–∞–¥–æ—Ä –õ—é–±–≤–∏'!");
    }, 10000);

  } else {
    appState.userAddress = null;
    walletInfo.style.display = 'none';
    profileBalance.textContent = "–ó–∞–≥—Ä—É–∑–∫–∞...";
    const nftContainer = document.getElementById('nft-container');
    if (nftContainer) nftContainer.innerHTML = '<div class="nft-empty">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫</div>';
    const coupleNftSection = document.getElementById('couple-nft-section');
    if (coupleNftSection) coupleNftSection.style.display = 'none';
  }
}

connector.onStatusChange(updateConnectionState);

// ========================
// üí∞ –†–∞–±–æ—Ç–∞ —Å Jetton ($LOVE)
// ========================
async function getLoveBalance(address) {
  if (!address) return "0.0000";
  try {
    const response = await fetch(`https://tonapi.io/v2/accounts/${address}/jettons`);
    if (!response.ok) throw new Error(`HTTP ${response.status}`);
    const data = await response.json();
    const balances = data.balances || [];
    for (const jet of balances) {
      if (jet.jetton?.address?.toLowerCase() === CONFIG.JETTON_MASTER_ADDRESS.toLowerCase()) {
        const amount = BigInt(jet.balance || "0");
        const decimals = jet.jetton.decimals || 9;
        return (Number(amount) / (10 ** decimals)).toFixed(4);
      }
    }
    return "0.0000";
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ $LOVE:", error);
    return "‚Äî";
  }
}

async function getLoveBalanceRaw(address) {
  const balanceStr = await getLoveBalance(address);
  return parseFloat(balanceStr.replace('‚Äî', '0').replace(/,/g, '')) || 0;
}

// ========================
// üñºÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ NFT
// ========================
async function loadNFTs(address) {
  const container = document.getElementById('nft-container-profile') || document.getElementById('nft-container');
  if (!container) return;
  container.innerHTML = '<div class="nft-empty">–ó–∞–≥—Ä—É–∑–∫–∞ NFT...</div>';
  try {
    const response = await fetch(`https://tonapi.io/v2/nfts?account=${address}&limit=50`);
    if (!response.ok) throw new Error(`HTTP ${response.status}`);
    const data = await response.json();
    const nfts = data.nft_items || [];
    if (nfts.length === 0) {
      container.innerHTML = '<div class="nft-empty">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç NFT</div>';
      return;
    }
    container.innerHTML = '';
    nfts.forEach(nft => {
      const preview = nft.previews?.find(p => p.resolution === '100x100') || nft.previews?.[0];
      const image = preview?.url || 'https://via.placeholder.com/100';
      const name = nft.metadata?.name || '–ë–µ–∑ –∏–º–µ–Ω–∏';
      const div = document.createElement('div');
      div.className = 'nft-item';
      div.innerHTML = `
        <img src="${image}" class="nft-img" alt="${name}" onerror="this.src='https://via.placeholder.com/100'">
        <div class="nft-overlay">${name}</div>
      `;
      container.appendChild(div);
    });
    appState.cache.nfts = nfts;
  } catch (error) {
    container.innerHTML = '<div class="nft-empty">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ NFT</div>';
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ NFT:", error);
  }
}

// ========================
// üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–µ—Å—Ç–æ–≤
// ========================
async function checkSentTransaction(address) {
  try {
    const response = await fetch(`https://tonapi.io/v2/accounts/${address}/events?limit=10`);
    const data = await response.json();
    const hasOutgoing = data.events?.some(event => 
      event.actions?.some(action => 
        action.type === "TonTransfer" && action.sender?.address === address
      )
    );
    if (hasOutgoing) updateQuestProgress("send_first_transaction");
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:", e);
  }
}

async function checkHasNFT(address) {
  try {
    const response = await fetch(`https://tonapi.io/v2/nfts?account=${address}&limit=50`);
    const data = await response.json();
    const realNFTs = data.nft_items?.filter(nft => nft.collection);
    if (realNFTs?.length > 0) updateQuestProgress("buy_nft");
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ NFT:", e);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç
window.getLoveBalance = getLoveBalance;
window.getLoveBalanceRaw = getLoveBalanceRaw;
window.loadNFTs = loadNFTs;