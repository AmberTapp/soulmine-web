// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (—É–∂–µ –æ–±—ä—è–≤–ª–µ–Ω—ã –≤ utils.js) ===

// === AI SoulMatch ===
const ALL_INTERESTS = [
  '–ú—É–∑—ã–∫–∞', '–ö–∏–Ω–æ', '–°–ø–æ—Ä—Ç', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–ö–Ω–∏–≥–∏',
  '–ò–≥—Ä—ã', 'Web3', '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', '–ò—Å–∫—É—Å—Å—Ç–≤–æ', '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
  '–ï–¥–∞', '–§–∏—Ç–Ω–µ—Å', '–ú–µ–¥–∏—Ç–∞—Ü–∏—è', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–ë–∏–∑–Ω–µ—Å'
];

function loadAIParams() {
  const saved = localStorage.getItem('soulmine_ai_params');
  return saved ? JSON.parse(saved) : null;
}

function showAIParamsModal() {
  const modal = document.getElementById('ai-params-modal');
  if (!modal) return;

  const savedParams = loadAIParams();

  if (savedParams) {
    if (savedParams.ageRange) document.getElementById('age-range').value = savedParams.ageRange;
    if (savedParams.goal) document.getElementById('goal').value = savedParams.goal;
  }

  const container = document.getElementById('interests-container');
  container.innerHTML = '';
  ALL_INTERESTS.forEach(interest => {
    const div = document.createElement('div');
    div.innerHTML = `
      <label style="display: flex; align-items: center; cursor: pointer;">
        <input type="checkbox" value="${interest}" style="margin-right: 8px;">
        <span>${interest}</span>
      </label>
    `;
    container.appendChild(div);
  });

  if (savedParams && savedParams.interests) {
    const checkboxes = container.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(cb => {
      if (savedParams.interests.includes(cb.value)) {
        cb.checked = true;
      }
    });
  }

  modal.style.display = 'flex';
}

function saveAIParams() {
  const ageRange = document.getElementById('age-range').value;
  const goal = document.getElementById('goal').value;
  
  const checkboxes = document.querySelectorAll('#interests-container input[type="checkbox"]:checked');
  const interests = Array.from(checkboxes).map(cb => cb.value).slice(0, 3);

  if (interests.length === 0) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å.');
    return;
  }

  const params = { ageRange, interests, goal };
  localStorage.setItem('soulmine_ai_params', JSON.stringify(params));

  document.getElementById('ai-params-modal').style.display = 'none';

  findAISoulmate(params);
}

async function findAISoulmate(params) {
  if (!userAddress) {
    alert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!');
    return;
  }
  if (isCalling) {
    alert('–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∑–≤–æ–Ω–æ–∫!');
    return;
  }
  if (isSearching) {
    ws.send(JSON.stringify({ type: 'cancel_search' }));
    isSearching = false;
    return;
  }

  isSearching = true;

  const searchingModal = document.getElementById('searching-modal');
  if (searchingModal) searchingModal.style.display = 'flex';

  ws.send(JSON.stringify({
    type: 'find_ai_soulmate',
    address: userAddress,
    params: params
  }));

  console.log('üöÄ –ó–∞–ø—É—â–µ–Ω AI SoulMatch —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', params);
}

// –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞
window.findRandomPartner = function() {
  const savedParams = loadAIParams();
  if (savedParams) {
    findAISoulmate(savedParams);
  } else {
    showAIParamsModal();
  }
};

// === –°–∏—Å—Ç–µ–º–∞ —Å–≤–∞–π–ø–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—ã ===
const DEMO_USERS = [
  { id: 1, name: "–ê–Ω–Ω–∞", age: 24, interests: "–ú—É–∑—ã–∫–∞, –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", wallet: "EQAbc...def", image: "model01" },
  { id: 2, name: "–ú–∞—Ä–∫", age: 28, interests: "Web3, –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", wallet: "EQGhi...jkl", image: "model02" },
  { id: 3, name: "–õ–∏–∑–∞", age: 22, interests: "–ò—Å–∫—É—Å—Å—Ç–≤–æ, –ö–∏–Ω–æ", wallet: "EQMno...pqr", image: "model03" },
  { id: 4, name: "–î–º–∏—Ç—Ä–∏–π", age: 31, interests: "–°–ø–æ—Ä—Ç, –ë–∏–∑–Ω–µ—Å", wallet: "EQStu...vwx", image: "model04" },
  { id: 5, name: "–°–æ—Ñ–∏—è", age: 26, interests: "–ö–Ω–∏–≥–∏, –ú–µ–¥–∏—Ç–∞—Ü–∏—è", wallet: "EQYza...bcd", image: "model05" },
  { id: 6, name: "–ê–ª–µ–∫—Å–µ–π", age: 29, interests: "–ò–≥—Ä—ã, –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", wallet: "EQEfg...hij", image: "model06" },
  { id: 7, name: "–í–∏–∫—Ç–æ—Ä–∏—è", age: 27, interests: "–ï–¥–∞, –§–∏—Ç–Ω–µ—Å", wallet: "EQKlm...nop", image: "model11" },
  { id: 8, name: "–ò–≤–∞–Ω", age: 33, interests: "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, Web3", wallet: "EQQRS...TUV", image: "model44" }
];

let currentCardIndex = 0;
let currentCardElement = null;
let startX = 0;
let currentX = 0;
let isDragging = false;

function initSwipeArea() {
  const swipeArea = document.getElementById('swipe-area');
  if (!swipeArea) return;
  swipeArea.innerHTML = '';
  if (!userAddress) {
    swipeArea.innerHTML = `
      <div class="placeholder-card">
        <p>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–∞–π–ø–∞—Ç—å ‚ù§Ô∏è</p>
      </div>
    `;
    return;
  }
  for (let i = 0; i < Math.min(3, DEMO_USERS.length); i++) {
    createCard(i);
  }
  currentCardElement = swipeArea.querySelector('.swipe-card');
  if (currentCardElement) {
    currentCardElement.style.zIndex = '10';
  }
}

function createCard(index) {
  if (index >= DEMO_USERS.length) return;
  const user = DEMO_USERS[index];
  const card = document.createElement('div');
  card.className = 'swipe-card';
  card.dataset.index = index;
  card.innerHTML = `
    <img src="./models/${user.image}.png" alt="${user.name}">
    <div class="card-info">
      <h3>${user.name}, ${user.age}</h3>
      <p>${user.interests}</p>
      <p style="font-size: 0.8rem; opacity: 0.7;">${user.wallet.slice(0, 6)}...${user.wallet.slice(-4)}</p>
    </div>
  `;
  card.addEventListener('mousedown', startDrag);
  card.addEventListener('touchstart', startDrag);
  document.getElementById('swipe-area').appendChild(card);
}

function startDrag(e) {
  isDragging = true;
  startX = e.type === 'mousedown' ? e.clientX : e.touches[0].clientX;
  currentX = startX;
  document.addEventListener('mousemove', drag);
  document.addEventListener('touchmove', drag);
  document.addEventListener('mouseup', endDrag);
  document.addEventListener('touchend', endDrag);
}

function drag(e) {
  if (!isDragging) return;
  currentX = e.type === 'mousemove' ? e.clientX : e.touches[0].clientX;
  const deltaX = currentX - startX;
  const card = currentCardElement;
  if (card) {
    card.style.transform = `translateX(${deltaX}px) rotate(${deltaX * 0.1}deg)`;
    card.style.opacity = 1 - Math.abs(deltaX) / 500;
  }
}

function endDrag() {
  document.removeEventListener('mousemove', drag);
  document.removeEventListener('touchmove', drag);
  document.removeEventListener('mouseup', endDrag);
  document.removeEventListener('touchend', endDrag);
  if (!isDragging) return;
  isDragging = false;
  const deltaX = currentX - startX;
  const card = currentCardElement;
  if (!card) return;
  if (deltaX > 100) {
    card.classList.add('swiping-right');
    setTimeout(() => {
      handleLike();
    }, 300);
  } else if (deltaX < -100) {
    card.classList.add('swiping-left');
    setTimeout(() => {
      handleDislike();
    }, 300);
  } else {
    card.style.transform = 'translateX(0) rotate(0deg)';
    card.style.opacity = '1';
  }
}

function handleLike() {
  const user = DEMO_USERS[currentCardIndex];
  showLove(1.0);
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram-–±–æ—Ç
  sendWebAppData({
    type: "swipe",
    action: "like",
    partner: user.wallet
  });
  alert(`‚ù§Ô∏è –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è ${user.name}!`);
  showNextCard();
}

function handleDislike() {
  const user = DEMO_USERS[currentCardIndex];
  showLove(0.1);
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram-–±–æ—Ç
  sendWebAppData({
    type: "swipe",
    action: "dislike",
    partner: user.wallet
  });
  alert(`‚ùå –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ ${user.name}`);
  showNextCard();
}

function showNextCard() {
  currentCardIndex++;
  const swipeArea = document.getElementById('swipe-area');
  if (!swipeArea) return;
  if (currentCardElement) {
    currentCardElement.remove();
  }
  if (currentCardIndex < DEMO_USERS.length) {
    createCard(currentCardIndex);
    currentCardElement = swipeArea.querySelector('.swipe-card:last-child');
    if (currentCardElement) {
      currentCardElement.style.zIndex = '10';
    }
  } else {
    swipeArea.innerHTML = `
      <div class="placeholder-card">
        <p>–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ—Ö! –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –º—ã –Ω–∞–π–¥–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...</p>
      </div>
    `;
    currentCardElement = null;
    setTimeout(() => {
      currentCardIndex = 0;
      initSwipeArea();
    }, 3000);
  }
}

// === –î–µ–π—Å—Ç–≤–∏—è —Å —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π ===
function openChatWithCurrent() {
  if (!currentCardElement) {
    alert('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏!');
    return;
  }
  const index = parseInt(currentCardElement.dataset.index);
  const user = DEMO_USERS[index];
  callPartnerAddress = user.wallet;
  openChat();
}

function startVoiceCallWithCurrent() {
  if (!currentCardElement) {
    alert('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏!');
    return;
  }
  const index = parseInt(currentCardElement.dataset.index);
  const user = DEMO_USERS[index];
  callPartnerAddress = user.wallet;
  startVideoCall(); // –í –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏–¥–µ–æ
}

function startVideoCallWithCurrent() {
  if (!currentCardElement) {
    alert('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏!');
    return;
  }
  const index = parseInt(currentCardElement.dataset.index);
  const user = DEMO_USERS[index];
  callPartnerAddress = user.wallet;
  startVideoCall();
}

// === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram-–±–æ—Ç ===
function sendWebAppData(data) {
  if (window.Telegram && window.Telegram.WebApp) {
    try {
      window.Telegram.WebApp.sendData(JSON.stringify(data));
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram-–±–æ—Ç:', data);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram-–±–æ—Ç:', error);
    }
  } else {
    console.warn('‚ö†Ô∏è Telegram WebApp API –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ');
  }
}

// === –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤ ===
function initPeerConnection() {
  const config = {
    iceServers: [
      { urls: 'stun:stun.l.google.com:19302' },
      { urls: 'stun:stun1.l.google.com:19302' }
    ]
  };
  peerConnection = new RTCPeerConnection(config);
  console.log('‚úÖ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');

  peerConnection.ondatachannel = (event) => {
    setupDataChannel(event.channel);
  };
}

function setupDataChannel(channel) {
  dataChannel = channel;
  channel.onopen = () => {
    console.log('üì° DataChannel –æ—Ç–∫—Ä—ã—Ç');
    sendCompatibilityUpdate();
    sendEmotionSnapshot();
  };
  channel.onmessage = (event) => {
    const msg = JSON.parse(event.data);
    console.log('üì© –ü–æ–ª—É—á–µ–Ω–æ –ø–æ DataChannel:', msg);
    switch (msg.type) {
      case 'compatibility_update':
        coupleProgress.compatibility = msg.value;
        const display = document.getElementById('compatibility-display');
        if (display) display.textContent = `${msg.value.toFixed(1)}%`;
        checkCoupleNFTs();
        break;
      case 'emotion_snapshot':
        console.log('–≠–º–æ—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:', msg.emotions);
        break;
      case 'chat_message':
        appendChatMessage(msg.text, 'partner');
        break;
      case 'ai_match_found':
        callPartnerAddress = msg.partner;
        alert(`üéØ AI –Ω–∞—à–µ–ª –≤–∞–º –∏–¥–µ–∞–ª—å–Ω—É—é –ø–∞—Ä—É! –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ${(msg.compatibilityScore * 100).toFixed(0)}%`);
        const searchingModal = document.getElementById('searching-modal');
        if (searchingModal) searchingModal.style.display = 'none';
        isSearching = false;
        startVideoCall(true);
        break;
      case 'ai_match_not_found':
        alert(msg.message || '–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        const searchingModal2 = document.getElementById('searching-modal');
        if (searchingModal2) searchingModal2.style.display = 'none';
        isSearching = false;
        break;
    }
  };
  channel.onclose = () => {
    console.log('üîå DataChannel –∑–∞–∫—Ä—ã—Ç');
  };
}

function sendCompatibilityUpdate() {
  if (dataChannel && dataChannel.readyState === 'open') {
    dataChannel.send(JSON.stringify({
      type: 'compatibility_update',
      value: coupleProgress.compatibility
    }));
  }
}

function sendEmotionSnapshot() {
  if (dataChannel && dataChannel.readyState === 'open') {
    dataChannel.send(JSON.stringify({
      type: 'emotion_snapshot',
      emotions: soulAI.emotions
    }));
  }
}

async function loadFaceModel() {
  await faceapi.nets.tinyFaceDetector.loadFromUri('/models');
  await faceapi.nets.faceExpressionNet.loadFromUri('/models');
  console.log('‚úÖ –ú–æ–¥–µ–ª—å AI –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
}

async function analyzeFacialEmotions(videoElement) {
  if (!videoElement || !videoElement.srcObject) return;
  const detections = await faceapi.detectAllFaces(
    videoElement,
    new faceapi.TinyFaceDetectorOptions()
  ).withFaceExpressions();
  if (detections.length > 0) {
    const expressions = detections[0].expressions;
    updateEmotionStats(expressions);
    generateAISuggestion(expressions);
    sendEmotionSnapshot();
  }
}

function updateEmotionStats(expressions) {
  soulAI.emotions.happy += expressions.happy || 0;
  soulAI.emotions.neutral += expressions.neutral || 0;
  soulAI.emotions.surprised += expressions.surprised || 0;
  soulAI.emotions.focused += expressions.concentrating || 0;
}

function generateAISuggestion(expressions) {
  if (soulAI.adviceCooldown) return;
  soulAI.adviceCooldown = true;
  setTimeout(() => { soulAI.adviceCooldown = false; }, 8000);
  const adviceEl = document.getElementById('ai-advice');
  const msgEl = document.getElementById('ai-message');
  if (!adviceEl || !msgEl) return;
  adviceEl.style.display = 'block';
  if (expressions.happy > 0.7) {
    msgEl.textContent = "–û–Ω–∞ —É–ª—ã–±–∞–µ—Ç—Å—è ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π —à—É—Ç–∏—Ç—å!";
    showLove(0.5);
  } else if (expressions.neutral > 0.8) {
    msgEl.textContent = "–û–Ω–∞ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–∞ ‚Äî –∑–∞–¥–∞–π –ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å";
  } else if (expressions.surprised > 0.6) {
    msgEl.textContent = "–û–Ω–∞ —É–¥–∏–≤–ª–µ–Ω–∞ ‚Äî —Ä–∞–∑–≤–∏–≤–∞–π —Ç–µ–º—É!";
  } else {
    msgEl.textContent = "–û—Ç–ª–∏—á–Ω–∞—è —Ö–∏–º–∏—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ üëè";
  }
  setTimeout(() => { adviceEl.style.display = 'none'; }, 6000);
}

function updateCompatibility() {
  const total = soulAI.emotions.happy + soulAI.emotions.neutral + soulAI.emotions.surprised + soulAI.emotions.focused;
  if (total === 0) return;
  const happyRatio = soulAI.emotions.happy / total;
  const focusedRatio = soulAI.emotions.focused / total;
  if (happyRatio > 0.3 || focusedRatio > 0.3) {
    coupleProgress.compatibility = Math.min(100, coupleProgress.compatibility + 0.5);
    console.log(`‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ${coupleProgress.compatibility.toFixed(1)}%`);
    sendCompatibilityUpdate();
    checkCoupleNFTs();
  }
}

async function startVideoCall(isIncoming = false) {
  if (isCalling) return;
  const modal = document.getElementById('video-modal');
  if (!modal) return;
  modal.style.display = 'flex';

  try {
    localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
    const localVideo = document.getElementById('local-video');
    if (localVideo) localVideo.srcObject = localStream;

    if (!peerConnection) {
      initPeerConnection();
    }

    localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));

    peerConnection.ontrack = (event) => {
      const remoteVideo = document.getElementById('remote-video');
      if (remoteVideo) remoteVideo.srcObject = event.streams[0];
    };

    peerConnection.onicecandidate = (event) => {
      if (event.candidate && ws && ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({
          type: 'candidate',
          candidate: event.candidate,
          to: callPartnerAddress
        }));
      }
    };

    if (isIncoming) {
      // –ñ–¥–µ–º offer —á–µ—Ä–µ–∑ ws
    } else {
      if (!callPartnerAddress) {
        const partner = prompt("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –∑–≤–æ–Ω–∫–∞:");
        if (!partner) {
          modal.style.display = 'none';
          return;
        }
        callPartnerAddress = partner;
      }
      const offer = await peerConnection.createOffer();
      await peerConnection.setLocalDescription(offer);
      ws.send(JSON.stringify({
        type: 'offer',
        sdp: offer,
        to: callPartnerAddress
      }));
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ SDP-offer');
    }

    setTimeout(() => {
      const statusEl = document.getElementById('video-status');
      if (statusEl) statusEl.textContent = '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
      callStartTime = new Date();
      startCallTimer();
      startMiningEffect();
      userBehavior.usedVideo = true;
      isCalling = true;
      if (callHistory.length === 0) {
        awardCitizenNFT();
      }
    }, 2000);

    setInterval(() => {
      if (isCalling) {
        const remoteVideo = document.getElementById('remote-video');
        if (remoteVideo && remoteVideo.srcObject) {
          analyzeFacialEmotions(remoteVideo);
          updateCompatibility();
        }
      }
    }, 3000);

    if (!window.faceModelLoaded) {
      await loadFaceModel();
      window.faceModelLoaded = true;
    }

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ startVideoCall:", error);
    alert("–û—à–∏–±–∫–∞: " + error.message);
    if (modal) modal.style.display = 'none';
  }
}

function startCallTimer() {
  callTimer = setInterval(() => {
    const now = new Date();
    const diff = new Date(now - callStartTime);
    const mins = String(diff.getMinutes()).padStart(2, '0');
    const secs = String(diff.getSeconds()).padStart(2, '0');
    const timerEl = document.getElementById('video-timer');
    if (timerEl) timerEl.textContent = `${mins}:${secs}`;
  }, 1000);
}

function startMiningEffect() {
  miningInterval = setInterval(() => {
    if (isCalling) {
      showLove(0.3);
      triggerMiningEffect("+0.3 $LOVE");
    }
  }, 30000);
}

function endVideoCall() {
  if (callTimer) clearInterval(callTimer);
  if (miningInterval) clearInterval(miningInterval);
  if (localStream) localStream.getTracks().forEach(t => t.stop());
  if (peerConnection) peerConnection.close();
  peerConnection = null;

  const durationMs = callStartTime ? (new Date() - callStartTime) : 0;
  const minutes = Math.floor(durationMs / 60000);

  const callRecord = {
    id: Date.now().toString(36),
    partner: callPartnerAddress,
    startTime: callStartTime?.toISOString() || new Date().toISOString(),
    duration: minutes,
    compatibility: coupleProgress.compatibility,
    emotions: { ...soulAI.emotions },
    earnedLove: minutes * 0.3
  };

  callHistory.push(callRecord);
  saveCallHistory();
  addLove(callRecord.earnedLove);
  upgradeCitizenLevel();

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram-–±–æ—Ç
  sendWebAppData({
    type: "call_ended",
    duration: minutes,
    compatibility: coupleProgress.compatibility,
    messages: userBehavior.messagesSent,
    earned: callRecord.earnedLove
  });

  const statusEl = document.getElementById('video-status');
  if (statusEl) statusEl.textContent = '–í—ã–∑–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω';

  setTimeout(() => {
    const modal = document.getElementById('video-modal');
    if (modal) modal.style.display = 'none';
  }, 2000);

  isCalling = false;
  callStartTime = null;
  callPartnerAddress = null;
}

function connectToSignalingServer() {
  if (ws && ws.readyState === WebSocket.OPEN) return;
  ws = new WebSocket(SIGNALING_SERVER_URL);

  ws.onopen = () => {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–∏–≥–Ω–∞–ª—å-—Å–µ—Ä–≤–µ—Ä—É');
    if (userAddress) {
      ws.send(JSON.stringify({ type: 'register', address: userAddress }));
    }
  };

  ws.onmessage = async (event) => {
    const data = JSON.parse(event.data);
    console.log('üì© –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª:', data);
    switch (data.type) {
      case 'offer':
        await handleOffer(data);
        break;
      case 'answer':
        await handleAnswer(data);
        break;
      case 'candidate':
        await handleCandidate(data);
        break;
      case 'call_request':
        if (confirm(`–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç ${data.from}! –ü—Ä–∏–Ω—è—Ç—å?`)) {
          callPartnerAddress = data.from;
          await startVideoCall(true);
          ws.send(JSON.stringify({ type: 'call_accept', to: data.from }));
        } else {
          ws.send(JSON.stringify({ type: 'call_reject', to: data.from }));
        }
        break;
      case 'random_match_found':
        callPartnerAddress = data.partner;
        alert(`üéâ –ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! –ù–∞—á–∏–Ω–∞–µ–º –∑–≤–æ–Ω–æ–∫...`);
        const searchingModal = document.getElementById('searching-modal');
        if (searchingModal) searchingModal.style.display = 'none';
        isSearching = false;
        const matchBtn = document.getElementById('random-match-btn');
        if (matchBtn) matchBtn.textContent = 'üíò –ù–∞–π—Ç–∏ —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—Ä—É';
        await startVideoCall(true);
        break;
      case 'find_ai_soulmate':
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞
        break;
      case 'ai_match_found':
        callPartnerAddress = data.partner;
        alert(`üéØ AI –Ω–∞—à–µ–ª –≤–∞–º –∏–¥–µ–∞–ª—å–Ω—É—é –ø–∞—Ä—É! –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: ${(data.compatibilityScore * 100).toFixed(0)}%`);
        const searchingModalAI = document.getElementById('searching-modal');
        if (searchingModalAI) searchingModalAI.style.display = 'none';
        isSearching = false;
        await startVideoCall(true);
        break;
      case 'ai_match_not_found':
        alert(data.message || '–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        const searchingModalNotFound = document.getElementById('searching-modal');
        if (searchingModalNotFound) searchingModalNotFound.style.display = 'none';
        isSearching = false;
        break;
    }
  };

  ws.onclose = () => {
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∑–∞–∫—Ä—ã—Ç–æ');
    setTimeout(connectToSignalingServer, 3000);
  };

  ws.onerror = (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
  };
}

async function handleOffer(data) {
  if (!peerConnection) {
    initPeerConnection();
    localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
    localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));
    peerConnection.ontrack = (event) => {
      const remoteVideo = document.getElementById('remote-video');
      if (remoteVideo) remoteVideo.srcObject = event.streams[0];
    };
    peerConnection.onicecandidate = (event) => {
      if (event.candidate && ws && ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify({
          type: 'candidate',
          candidate: event.candidate,
          to: data.from
        }));
      }
    };
  }

  await peerConnection.setRemoteDescription(new RTCSessionDescription(data.sdp));
  const answer = await peerConnection.createAnswer();
  await peerConnection.setLocalDescription(answer);
  ws.send(JSON.stringify({
    type: 'answer',
    sdp: answer,
    to: data.from
  }));
  console.log('üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω answer');
}

async function handleAnswer(data) {
  await peerConnection.setRemoteDescription(new RTCSessionDescription(data.sdp));
  console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω answer, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
}

async function handleCandidate(data) {
  await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
}

// === AR-—Ñ–∏–ª—å—Ç—Ä—ã ===
function applyFilter(filter) {
  document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
  event.target.classList.add('active');
  currentFilter = filter;
  const effects = document.getElementById('ar-effects');
  if (!effects) return;
  effects.innerHTML = '';
  if (filter === 'hearts') startHeartsEffect();
  else if (filter === 'ton') startTonEffect();
  else if (filter === 'party') startConfettiEffect();
}

function startHeartsEffect() {
  const effects = document.getElementById('ar-effects');
  if (!effects) return;
  setInterval(() => {
    if (currentFilter !== 'hearts') return;
    const heart = document.createElement('img');
    heart.src = 'https://cdn-icons-png.flaticon.com/128/833/833472.png';
    heart.style.cssText = `position:absolute;width:${Math.random()*20+20}px;left:${Math.random()*80+10}%;top:80%;opacity:0;transition:top 3s ease,opacity 3s;`;
    effects.appendChild(heart);
    setTimeout(() => { heart.style.top = '10%'; heart.style.opacity = '1'; }, 100);
    setTimeout(() => { heart.remove(); }, 3000);
  }, 800);
}

function startTonEffect() {
  const effects = document.getElementById('ar-effects');
  if (!effects) return;
  const tonLogo = document.createElement('img');
  tonLogo.src = 'https://ton.org/assets/logo-circle.svg';
  tonLogo.style.cssText = 'position:absolute;top:10%;right:10%;width:60px;filter:drop-shadow(0 0 10px #00005B);opacity:0.9;';
  effects.appendChild(tonLogo);
}

function startConfettiEffect() {
  const effects = document.getElementById('ar-effects');
  if (!effects) return;
  ['üéâ', 'üéä', '‚ú®', 'üéà'].forEach(emoji => {
    setTimeout(() => {
      if (currentFilter === 'party') {
        const confetti = document.createElement('div');
        confetti.textContent = emoji;
        confetti.style.cssText = `position:absolute;font-size:20px;left:${Math.random()*100}%;top:-20px;animation:fall-confetti 5s linear forwards;`;
        effects.appendChild(confetti);
      }
    }, Math.random() * 3000);
  });
}

function captureMoment() {
  const nftName = currentFilter === 'hearts' ? "–ú–∞–≥–∏—è –ª—é–±–≤–∏" :
                  currentFilter === 'ton' ? "–ß–µ–º–ø–∏–æ–Ω TON" :
                  currentFilter === 'party' ? "–ö–æ—Ä–æ–ª—å –≤–µ—á–µ—Ä–∏–Ω–∫–∏" : "–û–±—ã—á–Ω—ã–π –º–æ–º–µ–Ω—Ç";
  const image = { hearts: "‚ù§Ô∏è", ton: "üíé", party: "üéâ", default: "üì∑" }[currentFilter] || "üì∑";
  showNFTModal({ name: nftName, image });
  addLove(5);
}

// === –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ ===
window.initSwipeArea = initSwipeArea;
window.openChatWithCurrent = openChatWithCurrent;
window.startVoiceCallWithCurrent = startVoiceCallWithCurrent;
window.startVideoCallWithCurrent = startVideoCallWithCurrent;
window.sendWebAppData = sendWebAppData;