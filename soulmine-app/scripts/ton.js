import { appState, CONFIG, updateQuestProgress, checkHasNFT, checkSentTransaction, showViralToast, unlockAchievement } from './utils.js';

// ========================
// üåê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TONCONNECT
// ========================

const connector = new window.TonConnect.UI.Connector({
  manifestUrl: CONFIG.TON_MANIFEST_URL, // ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: –Ω–µ—Ç –ø—Ä–æ–±–µ–ª–æ–≤, HTTPS, –≤–∞–ª–∏–¥–Ω—ã–π JSON
  buttonRootId: 'ton-connect-button-container'
});

// ‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI –¥–ª—è Telegram Web App ‚Äî –í–ê–ñ–ù–û: returnUrl –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ß–ò–°–¢–´–ú
connector.uiOptions = {
  twaReturnUrl: 'https://t.me/LoveSoulMine_Bot' // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ë–†–ê–ù–´ –í–°–ï –ü–†–û–ë–ï–õ–´
};

appState.connector = connector;
window.connector = connector;

// ========================
// üéØ UI –≠–õ–ï–ú–ï–ù–¢–´
// ========================

const walletInfo = document.getElementById('wallet-info');
const profileBalance = document.getElementById('profile-balance');

// ========================
// üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø
// ========================

async function updateConnectionState() {
  if (connector.connected && connector.wallet?.account?.address) {
    const address = connector.wallet.account.address.toLowerCase(); // ‚úÖ –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    appState.userAddress = address;

    // ‚úÖ UI: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–¥—Ä–µ—Å
    walletInfo.style.display = 'block';
    walletInfo.innerHTML = `<strong>–ê–¥—Ä–µ—Å:</strong> ${address.slice(0, 8)}...${address.slice(-6)}`;

    const addressDisplay = document.getElementById('wallet-address-display');
    if (addressDisplay) addressDisplay.textContent = `${address.slice(0, 8)}...${address.slice(-6)}`;

    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å $LOVE
    const balanceStr = await getLoveBalance(address);
    const balanceNum = parseFloat(balanceStr.replace('‚Äî', '0').replace(/,/g, '')) || 0;
    appState.cache.loveBalance = balanceNum;
    profileBalance.textContent = `${balanceStr} $LOVE`;

    // ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–≤–µ—Å—Ç—ã
    updateQuestProgress("connect_wallet");

    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ NFT —á–µ—Ä–µ–∑ 1 —Å–µ–∫ ‚Äî –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è race condition
    setTimeout(() => {
      checkSentTransaction(address);
      checkHasNFT(address);
    }, 1000);

    // üì° –°–∏–≥–Ω–∞–ª–∏–Ω–≥ (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
    if (typeof connectToSignalingServer === 'function') {
      connectToSignalingServer();
    }

    // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram WebApp
    if (window.Telegram?.WebApp?.sendData) {
      window.Telegram.WebApp.sendData(JSON.stringify({
        type: "wallet_connected",
        address: address,
        balance: balanceNum,
        timestamp: Date.now()
      }));
    }

    // üî• –†–∏—Ç—É–∞–ª –ø–æ—Å–≤—è—â–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    const isFirstLoginKey = `soulmine_first_login_${address}`;
    if (!localStorage.getItem(isFirstLoginKey)) {
      localStorage.setItem(isFirstLoginKey, '1');

      setTimeout(() => {
        const ritualModal = document.createElement('div');
        ritualModal.className = 'modal';
        ritualModal.style.cssText = `
          position: fixed; top: 0; left: 0; width: 100%; height: 100%;
          background: rgba(0,0,0,0.9); display: flex; align-items: center; justify-content: center;
          z-index: 10001; font-family: system-ui, sans-serif;
        `;
        ritualModal.innerHTML = `
          <div class="modal-content" style="
            background: linear-gradient(135deg, #0a0a2a, #1a1a4a);
            color: #fff; padding: 30px; border-radius: 16px; text-align: center;
            max-width: 90%; box-shadow: 0 12px 40px rgba(0, 209, 178, 0.4);
          ">
            <div style="font-size: 4rem; margin-bottom: 20px;">üíú</div>
            <h2 style="color: #00D1B2; margin-bottom: 15px;">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–ø–æ—Å—Ç–æ–ª –õ—é–±–≤–∏!</h2>
            <p style="margin-bottom: 25px;">–¢—ã —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤–æ –í—Å–µ–ª–µ–Ω–Ω–æ–π SoulMine.</p>
            <div style="background: rgba(0, 209, 178, 0.2); padding: 20px; border-radius: 15px; margin: 20px 0;">
              <p><strong>üéÅ –¢–≤–æ–π –¥–∞—Ä:</strong></p>
              <p>+50 $LOVE</p>
              <p>NFT: "–ê–ø–æ—Å—Ç–æ–ª –õ—é–±–≤–∏"</p>
            </div>
            <button onclick="
              document.body.removeChild(this.parentElement.parentElement);
              showLove(50);
              unlockAchievement('apostle', '–ê–ø–æ—Å—Ç–æ–ª –õ—é–±–≤–∏', '–ü–µ—Ä–≤—ã–π —à–∞–≥ –≤–æ –í—Å–µ–ª–µ–Ω–Ω–æ–π SoulMine', 'üíú');
            " class="btn btn-primary" style="
              width: 100%; padding: 14px; border: none; border-radius: 10px;
              background: linear-gradient(135deg, #00D1B2, #00F0E9); color: #000; font-weight: bold;
              font-size: 16px; cursor: pointer;
            ">‚ú® –ü—Ä–∏–Ω—è—Ç—å –ø–æ—Å–≤—è—â–µ–Ω–∏–µ</button>
          </div>
        `;
        document.body.appendChild(ritualModal);

        // ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 15 —Å–µ–∫, –µ—Å–ª–∏ –Ω–µ –Ω–∞–∂–∞–ª–∏
        setTimeout(() => {
          if (ritualModal.parentElement) ritualModal.parentElement.remove();
        }, 15000);
      }, 3000);

      // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      if (window.Telegram?.WebApp?.sendData) {
        window.Telegram.WebApp.sendData(JSON.stringify({
          type: "first_login",
          address: address,
          source: "tonconnect"
        }));
      }
    }

    // üöÄ –í–ò–†–£–°–ù–´–ô –¢–†–ò–ì–ì–ï–†: —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    setTimeout(() => {
      // ‚úÖ –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º encodeURIComponent –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ URL
      const refLink = `https://t.me/LoveSoulMine_Bot?start=ref_${encodeURIComponent(address)}`;
      const shareText = `–Ø –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ SoulMine ‚Äî –í—Å–µ–ª–µ–Ω–Ω–æ–π –õ—é–±–≤–∏ –Ω–∞ TON! üíú\n–ü–æ–ª—É—á–∏–ª 50 $LOVE –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è ‚Üí ${refLink}`;

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å—Ä–µ–¥–∞—Ö
      navigator.clipboard.writeText(shareText)
        .then(() => {
          showViralToast("üíå –°—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–∑–µ–π —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 3 —á–µ–ª–æ–≤–µ–∫ ‚Äî –ø–æ–ª—É—á–∏—Ç–µ NFT '–ê–º–±–∞—Å—Å–∞–¥–æ—Ä –õ—é–±–≤–∏'!");
        })
        .catch(err => {
          console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä:", err);
          showViralToast("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É. –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é ‚Üí ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª");
        });

      // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –≤ Telegram, –µ—Å–ª–∏ –≤ TWA
      if (window.Telegram?.WebApp?.openLink) {
        setTimeout(() => {
          window.Telegram.WebApp.openLink(refLink);
        }, 2000);
      }
    }, 10000);

  } else {
    // ‚úÖ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
    appState.userAddress = null;
    walletInfo.style.display = 'none';
    profileBalance.textContent = "–ó–∞–≥—Ä—É–∑–∫–∞...";

    // ‚úÖ –û—á–∏—â–∞–µ–º NFT-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    const nftContainer = document.getElementById('nft-container');
    if (nftContainer) nftContainer.innerHTML = '<div class="nft-empty">–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫</div>';

    const coupleNftSection = document.getElementById('couple-nft-section');
    if (coupleNftSection) coupleNftSection.style.display = 'none';

    // ‚úÖ –û—á–∏—â–∞–µ–º –∫—ç—à, –µ—Å–ª–∏ –∫–æ—à–µ–ª—ë–∫ –æ—Ç–∫–ª—é—á—ë–Ω
    appState.cache.loveBalance = null;
    appState.cache.nfts = [];
  }
}

// ‚úÖ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
connector.onStatusChange(updateConnectionState);

// ========================
// üí∞ –†–ê–ë–û–¢–ê –° JETTON ($LOVE)
// ========================

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å $LOVE —á–µ—Ä–µ–∑ TonAPI
 * @param {string} address ‚Äî –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<string>} ‚Äî –±–∞–ª–∞–Ω—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "123.4567"
 */
async function getLoveBalance(address) {
  if (!address || typeof address !== 'string') return "0.0000";

  try {
    const response = await fetch(`https://tonapi.io/v2/accounts/${address}/jettons`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'SoulMineBot/1.0 (WebApp)'
      },
      cache: 'no-store' // ‚úÖ –ù–µ –∫—ç—à–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ stale –¥–∞–Ω–Ω—ã—Ö
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();
    const balances = Array.isArray(data.balances) ? data.balances : [];

    for (const jetton of balances) {
      const jettonAddress = jetton.jetton?.address?.toLowerCase();
      if (jettonAddress === CONFIG.JETTON_MASTER_ADDRESS.toLowerCase()) {
        const amount = BigInt(jetton.balance || "0");
        const decimals = jetton.jetton?.decimals ?? 9; // ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const balance = Number(amount) / (10 ** decimals);
        return balance.toFixed(4);
      }
    }

    return "0.0000"; // ‚úÖ –Ø–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–ª—å, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ $LOVE:", error.message || error);
    return "‚Äî"; // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Ç–∞–µ–º—ã–π –¥–µ—Ñ–æ–ª—Ç
  }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–ª–∞–Ω—Å –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞ (–¥–ª—è –ª–æ–≥–∏–∫–∏)
 * @param {string} address
 * @returns {number}
 */
async function getLoveBalanceRaw(address) {
  const balanceStr = await getLoveBalance(address);
  return parseFloat(balanceStr.replace('‚Äî', '0').replace(/,/g, '')) || 0;
}

// ========================
// üñºÔ∏è –ó–ê–ì–†–£–ó–ö–ê NFT
// ========================

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ TonAPI
 * @param {string} address ‚Äî –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function loadNFTs(address) {
  if (!address) return;

  const container = document.getElementById('nft-container-profile') || document.getElementById('nft-container');
  if (!container) return;

  container.innerHTML = '<div class="nft-empty">–ó–∞–≥—Ä—É–∑–∫–∞ NFT...</div>';

  try {
    const response = await fetch(`https://tonapi.io/v2/nfts?account=${address}&limit=50`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'SoulMineBot/1.0 (WebApp)'
      },
      cache: 'no-store'
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();
    const nfts = Array.isArray(data.nft_items) ? data.nft_items : [];

    if (nfts.length === 0) {
      container.innerHTML = '<div class="nft-empty">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç NFT</div>';
      appState.cache.nfts = [];
      return;
    }

    container.innerHTML = '';
    appState.cache.nfts = nfts;

    nfts.forEach(nft => {
      // ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const preview = nft.previews?.find(p => p.resolution === '100x100') || nft.previews?.[0];
      const imageUrl = preview?.url || 'https://via.placeholder.com/100'; // ‚úÖ –ß–∏—Å—Ç—ã–π URL –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤
      const name = nft.metadata?.name || '–ë–µ–∑ –∏–º–µ–Ω–∏';
      const collection = nft.collection?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è';

      const div = document.createElement('div');
      div.className = 'nft-item';
      div.innerHTML = `
        <img 
          src="${imageUrl}" 
          class="nft-img" 
          alt="${name} ‚Äî ${collection}" 
          onerror="this.src='https://via.placeholder.com/100'; this.onerror=null;"
        >
        <div class="nft-overlay">${name}</div>
      `;
      container.appendChild(div);
    });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ NFT:", error.message || error);
    container.innerHTML = '<div class="nft-empty">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ NFT</div>';
  }
}

// ========================
// üîç –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–í–ï–°–¢–û–í
// ========================

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
 * @param {string} address
 */
async function checkSentTransaction(address) {
  if (!address) return;

  try {
    const response = await fetch(`https://tonapi.io/v2/accounts/${address}/events?limit=10`, {
      method: 'GET',
      headers: { 'Accept': 'application/json' }
    });

    if (!response.ok) throw new Error(`HTTP ${response.status}`);

    const data = await response.json();
    const events = Array.isArray(data.events) ? data.events : [];

    const hasOutgoing = events.some(event => 
      Array.isArray(event.actions) && 
      event.actions.some(action => 
        action.type === "TonTransfer" && 
        action.sender?.address?.toLowerCase() === address.toLowerCase()
      )
    );

    if (hasOutgoing) {
      updateQuestProgress("send_first_transaction");
    }

  } catch (e) {
    console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", e.message);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ NFT –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
 * @param {string} address
 */
async function checkHasNFT(address) {
  if (!address) return;

  try {
    const response = await fetch(`https://tonapi.io/v2/nfts?account=${address}&limit=50`, {
      method: 'GET',
      headers: { 'Accept': 'application/json' }
    });

    if (!response.ok) throw new Error(`HTTP ${response.status}`);

    const data = await response.json();
    const nfts = Array.isArray(data.nft_items) ? data.nft_items : [];

    // ‚úÖ –¢–æ–ª—å–∫–æ NFT –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π (–Ω–µ –º—É—Å–æ—Ä–Ω—ã–µ)
    const realNFTs = nfts.filter(nft => nft.collection && nft.collection.address);

    if (realNFTs.length > 0) {
      updateQuestProgress("buy_nft");
    }

  } catch (e) {
    console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å NFT:", e.message);
  }
}

// ========================
// üì§ –≠–ö–°–ü–û–†–¢ –í –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–™–ï–ö–¢
// ========================

window.getLoveBalance = getLoveBalance;
window.getLoveBalanceRaw = getLoveBalanceRaw;
window.loadNFTs = loadNFTs;

// ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –≠–ö–°–ü–û–†–¢ –î–õ–Ø –¢–ï–°–¢–û–í –ò –î–ï–ë–ê–ì–ê
if (window.DEBUG) {
  window.connector = connector;
  window.updateConnectionState = updateConnectionState;
}